// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductType {
  id             String                 @id @default(cuid())
  name           String
  organizationId String
  organization   Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  products       Product[]
  attributes     ProductTypeAttribute[]

  @@unique([name, organizationId])
}

enum AttributeType {
  TEXT
  NUMBER
}

model ProductTypeAttribute {
  id                    String                  @id @default(cuid())
  name                  String
  type                  AttributeType
  productTypeId         String
  productType           ProductType             @relation(fields: [productTypeId], references: [id], onDelete: Cascade)
  ProductVariantDetails ProductVariantDetails[]

  @@unique([productTypeId, name])
}

model Product {
  id             String           @id @default(cuid())
  brand          String
  name           String
  organizationId String
  productTypeId  String
  productType    ProductType      @relation(fields: [productTypeId], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id])
  variants       ProductVariant[]
}

model ProductVariant {
  id        String                  @id @default(cuid())
  sku       String
  price     Float
  productId String
  product   Product                 @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  details   ProductVariantDetails[]
}

model ProductVariantDetails {
  id          String               @id @default(cuid())
  variantId   String
  variant     ProductVariant       @relation(fields: [variantId], references: [id])
  attributeId String
  attribute   ProductTypeAttribute @relation(fields: [attributeId], references: [id])
  valueNumber Float?
  valueText   String?
}

model Organization {
  id           String        @id @default(cuid())
  name         String        @unique
  masterPin    String
  users        User[]
  products     Product[]
  productTypes ProductType[]
}
